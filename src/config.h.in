//
// Created by Lyndon on 2024/12/17.
//

#ifndef CONFIG_H
#define CONFIG_H
#if _MSC_VER >= 1600
#pragma execution_character_set("utf-8")
#endif

#if defined(_WIN32)
#include <windows.h>
#endif

#include <vector>
#include <string>
#include <algorithm>
#include <cstdlib>

inline const char* QGIS_LAYER_ENCODING = "UTF-8";
inline const char* BASE_TILE_NAME = "BaseTile";
inline const char* MAIN_TILE_NAME = "MainTile";
inline const char* REAL3D_TILE_NAME = "Real3DTile";
inline const char* CESIUM_TILES_PROVIDER = "cesiumtiles";
inline const char* MAIN_CRS = "EPSG:3857";
inline const char* REAL3D_SOURCE_CRS = "EPSG:4326";

const std::vector<std::string> CIRCLE_LABELS = {"核心区", "警戒区", "控制区"};

// 1 英寸 = 2.54 厘米
const double CM2INCH = 25.4;
// 宋体 黑体 每磅宽度 毫米(mm) 1磅 = 0.352778mm ， 12号字宽度 = 12 * 0.352778
const double SIM_PER_POUND_WIDTH = 0.352778;
// 素数
const int DPI = 300;

#if defined(_WIN32)
// for Windows
inline const char* CONF_FILE = "./conf/config.yaml";
inline const char* QGIS_PREFIX_PATH = "D:/iProject/cpath/OSGeo4W/apps/qgis";
inline const char* QGIS_PROJECT_PATH = "D:/iProject/cpath/qgis_demo1/common/project";
inline const char* QGIS_PROJECT_FILE_NAME = "/project3d1.qgz";
#elif defined(__linux__)
// for Linux
inline const char* CONF_FILE = "./conf/config.yaml";
inline const char* QGIS_PREFIX_PATH = "/lyndon/iProject/cpath/QGIS/output";
inline const char* QGIS_PROJECT_PATH = "/lyndon/iProject/cpath/qgis_demo1/common/project";
inline const char* QGIS_PROJECT_FILE_NAME = "/project3d1.qgz";
#endif

// Function to get boolean value from environment variable
inline bool getEnvBool(const char* envVarName, bool defaultValue = false) {
    const char* envValue = getenv(envVarName);
    if (envValue == nullptr) {
        return defaultValue;
    }
    std::string value(envValue);
    std::transform(value.begin(), value.end(), value.begin(), [](unsigned char c) { return std::tolower(c); });
    if (value == "true" || value == "1") {
        return true;
    } else if (value == "false" || value == "0") {
        return false;
    }
    return defaultValue;
}

// Function to get boolean value from environment variable
inline std::string getEnvString(const char* envVarName, const std::string& defaultValue = "") {
    const char* envValue = getenv(envVarName);
    if (envValue == nullptr) {
        return defaultValue;
    }
    return std::string(envValue);
}

inline std::int32_t getEnvInt32(const char* envVarName, std::int32_t defaultValue = 0) {
    const char* envValue = getenv(envVarName);
    if (envValue == nullptr) {
        return defaultValue;
    }
    try {
        return std::stoi(envValue);
    } catch (const std::invalid_argument& e) {
        return defaultValue;
    } catch (const std::out_of_range& e) {
        return defaultValue;
    }
}

inline double getEnvDouble(const char* envVarName, double defaultValue = 0.0) {
    const char* envValue = getenv(envVarName);
    if (envValue == nullptr) {
        return defaultValue;
    }
    try {
        return std::stod(envValue);
    } catch (const std::invalid_argument& e) {
        return defaultValue;
    } catch (const std::out_of_range& e) {
        return defaultValue;
    }
}

inline float getEnvFloat(const char* envVarName, float defaultValue = 0.0) {
    const char* envValue = getenv(envVarName);
    if (envValue == nullptr) {
        return defaultValue;
    }
    try {
        return std::stof(envValue);
    } catch (const std::invalid_argument& e) {
        return defaultValue;
    } catch (const std::out_of_range& e) {
        return defaultValue;
    }
}


// Get ENABLE_POINT_CLUSTER from environment variable, default to false
inline bool ENABLE_POINT_CLUSTER = getEnvBool("ENABLE_POINT_CLUSTER", false);

inline bool ENABLE_3D = getEnvBool("ENABLE_3D", true);

inline double CIRCLE_RADIUS_COEFFICIENT = getEnvDouble("CIRCLE_RADIUS_COEFFICIENT", 2.0);

inline float FRAME_OFFSET_COEFFICIENT = getEnvFloat("FRAME_OFFSET_COEFFICIENT", 1.6);

inline float PIXEL_MM_COEFFICIENT = getEnvFloat("PIXEL_MM_COEFFICIENT", 2.8);

inline int BASE_TILE_LAYER_MAX_LEVEL = getEnvInt32("BASE_TILE_LAYER_MAX_LEVEL", 18);

inline int BASE_TILE_LAYER_MIN_LEVEL = getEnvInt32("BASE_TILE_LAYER_MIN_LEVEL", 0);

inline bool HAS_SCENE_PREFIX = getEnvBool("HAS_SCENE_PREFIX", false);

#ifdef OATPP_VERSION_LESS_1_4_0
#define DTOWRAPPERNS oatpp::data::mapping::type
#define OBJECTMAPPERNS oatpp::parser::json::mapping
#define PRIMITIVENS oatpp::data::mapping::type
#define ASYNCNS oatpp::core::async
#else
#define DTOWRAPPERNS oatpp::data::type
#define OBJECTMAPPERNS oatpp::json
#define PRIMITIVENS oatpp::data::type
#define ASYNCNS oatpp::async
#endif


#endif //CONFIG_H
